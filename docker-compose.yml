# version: "3.8"
   
# services:
#   postgres:
#     image: postgres
#     environment:
#       - POSTGRES_DB=postgres
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#   django:
#     build: .
#     #command: python manage.py runserver 0.0.0.0:8000
#     command: /code/start.sh
#     volumes:
#       - .:/code
#     ports:
#       - "8000:8000"
#     depends_on:
#       - postgres


# docker-compose build
version: '3.8'
volumes:
  # dbbackups:
  postgis-data:

services:

  postgres:
    image: kartoza/postgis:13
    volumes:
      - postgis-data:/var/lib/postgresql
      # - dbbackups:/backups
    environment:
      # If you need to create multiple database you can add coma separated databases eg gis,data
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASS=postgres
      # - ALLOW_IP_RANGE=0.0.0.0/0
      # Add extensions you need to be enabled by default in the DB. Default are the five specified below
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
    # ports:
    #   - 25432:5432
    restart: on-failure
    healthcheck:
      test: "exit 0"

  django:
    build: .
    #command: python manage.py runserver 0.0.0.0:8000
    command: /code/start.sh
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    depends_on:
      - postgres

  # dbbackups:
  #   image: kartoza/pg-backup:13.0
  #   hostname: pg-backups
  #   volumes:
  #     - dbbackups:/backups
  #   environment:
  #     - DUMPPREFIX=PG_db
  #     - POSTGRES_USER=docker
  #     - POSTGRES_PASS=docker
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_HOST=db
  #     - POSTGRES_DBNAME=gis
  #   restart: on-failure
  #   depends_on:
  #     postgres:
  #       condition: service_healthy